service: aws-sls-project

provider:
  name: aws
  runtime: nodejs12.x
  profile: SahejAWS
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: "*"
  apiKeys:
    - free:
        - myFreeApiKey
    - paid:
        - myPaidApiKey
  usagePlan:
    - free:
        quota:
          limit: 1000
          period: MONTH
        throttle:
          rateLimit: 5 # 5 api hits a seconds
          burstLimit: 20
    - paid:
        # quota: not including quota means infinite api hit limit
        #   limit: 10000
        #   period: MONTH
        throttle:
          rateLimit: 50 # 5 api hits a seconds
          burstLimit: 200

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  bucketName: aws-sls-project-demo-upload-bucket-123987
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

functions:
  getUser:
    handler: functions/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
  getPlayerScore:
    handler: functions/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true
  createPlayerScore:
    handler: functions/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method: POST
          cors: true
  createFile:
    handler: functions/endpoints/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
          private: true
  getFile:
    handler: functions/endpoints/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true
  sendEmail:
    handler: functions/endpoints/sendEmail.handler
    events:
      - http:
          path: send-email
          method: POST
          cors: true
  proxy:
    handler: functions/endpoints/proxy.handler
    events:
      - http:
          path: proxy-api/{proxy+}
          method: ANY
          integration: http-proxy
          request:
            uri: http://api.icndb.com/{proxy}
            parameters:
              paths:
                proxy: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
