service: aws-sls-project

provider:
  name: aws
  runtime: nodejs12.x
  profile: SahejAWS
  environment:
    tableName: ${self:custom.tableName}
    signupTableName: ${self:custom.signupTableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - ses:*
      Resource: "*"

plugins:
  - serverless-s3-sync
  - serverless-webpack
  - serverless-step-functions

stepFunctions:
  validate: true
  stateMachines:
    reminderEmail:
      name: reminderEmail
      events:
        - http:
            path: signup-with-reminders
            method: POST
            cors: true
      definition: ${file(./stepfunction.yml)}

package:
  individually: true

custom:
  s3Sync:
    - bucketName: aws-sls-project-demo-upload-bucket-123987
      localDir: UploadData
  tableName: player-points
  signupTableName: signup-table-name

functions:
  getUser:
    handler: functions/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
  getPlayerScore:
    handler: functions/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true
  createPlayerScore:
    handler: functions/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method: POST
          cors: true
  updatePlayerScore:
    handler: functions/endpoints/updatePlayerScore.handler
    events:
      - http:
          path: update-player-score/{ID}
          method: PUT
          cors: true
  getGameScores:
    handler: functions/endpoints/getGameScores.handler
    events:
      - http:
          path: get-game-scores/{game}
          method: GET
          cors: true

  addSignup:
    handler: functions/stepFunctionLambda/addSignup.handler
  getSignup:
    handler: functions/stepFunctionLambda/getSignup.handler
  sendReminderEmail:
    handler: functions/stepFunctionLambda/sendReminderEmail.handler

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: aws-sls-project-demo-upload-bucket-123987
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: game
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

        GlobalSecondaryIndexes:
          - IndexName: game-index
            KeySchema:
              - AttributeName: game
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    EmailSignupDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.signupTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
